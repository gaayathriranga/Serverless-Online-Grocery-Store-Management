image:
  name: hashicorp/terraform:latest
  entrypoint: [""]

variables:
  AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
  AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
  FRONT_END_PATH: ../front-end 

before_script:
  - apk update --repository=http://dl-cdn.alpinelinux.org/alpine/v3.13/main
  - apk add aws-cli
  - apk add bash
  - apk add npm
  - apk add --no-cache python3 py3-pip
  - python3 -m venv /path/to/venv
  - . /path/to/venv/bin/activate
  - pip install --upgrade pip
  - export PATH="/usr/local/bin:$PATH"

stages:
  - validate
  - test
  - plan
  - apply
  - destroy

validate:
  stage: validate
  script:
    - terraform init -backend=false
    - terraform validate
    - aws sts get-caller-identity


test:
  stage: test
  script:
    - . /path/to/venv/bin/activate
    - pip install boto3
    - python3 -m unittest discover -s ${CI_PROJECT_DIR}/lambda_handlers/

plan:
  stage: plan
  script:
    - cd ${CI_PROJECT_DIR}
    - terraform init
    - terraform plan -var "access_key=${AWS_ACCESS_KEY_ID}" -var "secret_key=${AWS_SECRET_ACCESS_KEY}"
  dependencies:
    - validate

apply:
  stage: apply
  script:
    - cd ${CI_PROJECT_DIR}
    - echo "Current directory:"
    - pwd
    - echo "Listing root directory contents:"
    - ls -al /
    - echo "Listing current directory contents:"
    - ls -al .
    - echo "Listing parent directory contents:"
    - ls -al ..
    - echo "Listing front-end directory contents:"
    - ls -al ../front-end
    - terraform init
    - terraform apply -auto-approve -var "access_key=${AWS_ACCESS_KEY_ID}" -var "secret_key=${AWS_SECRET_ACCESS_KEY}"
  artifacts:
    paths:
      - terraform/terraform.tfstate
  only:
    - main

destroy:
  stage: destroy
  script:
    - cd ${CI_PROJECT_DIR}
    - terraform init
    - terraform destroy -auto-approve -var "access_key=${AWS_ACCESS_KEY_ID}" -var "secret_key=${AWS_SECRET_ACCESS_KEY}"
  dependencies:
    - apply
    - plan
  when: manual
